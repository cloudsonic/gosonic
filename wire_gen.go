// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/cloudsonic/sonic-server/engine"
	"github.com/cloudsonic/sonic-server/itunesbridge"
	"github.com/cloudsonic/sonic-server/persistence/db_ledis"
	"github.com/cloudsonic/sonic-server/persistence/db_storm"
	"github.com/cloudsonic/sonic-server/scanner"
	"github.com/deluan/gomate"
	"github.com/deluan/gomate/ledis"
	"github.com/google/wire"
)

// Injectors from wire_injectors.go:

func initImporter(musicFolder string) *scanner.Importer {
	checkSumRepository := db_storm.NewCheckSumRepository()
	itunesScanner := scanner.NewItunesScanner(checkSumRepository)
	mediaFileRepository := db_storm.NewMediaFileRepository()
	albumRepository := db_storm.NewAlbumRepository()
	artistRepository := db_storm.NewArtistRepository()
	artistIndexRepository := db_storm.NewArtistIndexRepository()
	playlistRepository := db_storm.NewPlaylistRepository()
	propertyRepository := db_storm.NewPropertyRepository()
	db := newDB()
	search := engine.NewSearch(artistRepository, albumRepository, mediaFileRepository, db)
	importer := scanner.NewImporter(musicFolder, itunesScanner, mediaFileRepository, albumRepository, artistRepository, artistIndexRepository, playlistRepository, propertyRepository, search)
	return importer
}

// wire_injectors.go:

var allProviders = wire.NewSet(itunesbridge.NewItunesControl, db_storm.Set, engine.Set, scanner.Set, newDB)

func newDB() gomate.DB {
	return ledis.NewEmbeddedDB(db_ledis.Db())
}
