// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package api

import (
	"github.com/cloudsonic/sonic-server/engine"
	"github.com/cloudsonic/sonic-server/itunesbridge"
	"github.com/cloudsonic/sonic-server/persistence/ledis"
	"github.com/cloudsonic/sonic-server/persistence/storm"
	"github.com/deluan/gomate"
	ledis2 "github.com/deluan/gomate/ledis"
	"github.com/google/wire"
)

// Injectors from wire_injectors.go:

func initSystemController() *SystemController {
	systemController := NewSystemController()
	return systemController
}

func initBrowsingController() *BrowsingController {
	propertyRepository := storm.NewPropertyRepository()
	mediaFolderRepository := ledis.NewMediaFolderRepository()
	artistIndexRepository := ledis.NewArtistIndexRepository()
	artistRepository := storm.NewArtistRepository()
	albumRepository := ledis.NewAlbumRepository()
	mediaFileRepository := ledis.NewMediaFileRepository()
	browser := engine.NewBrowser(propertyRepository, mediaFolderRepository, artistIndexRepository, artistRepository, albumRepository, mediaFileRepository)
	browsingController := NewBrowsingController(browser)
	return browsingController
}

func initAlbumListController() *AlbumListController {
	albumRepository := ledis.NewAlbumRepository()
	mediaFileRepository := ledis.NewMediaFileRepository()
	nowPlayingRepository := ledis.NewNowPlayingRepository()
	listGenerator := engine.NewListGenerator(albumRepository, mediaFileRepository, nowPlayingRepository)
	albumListController := NewAlbumListController(listGenerator)
	return albumListController
}

func initMediaAnnotationController() *MediaAnnotationController {
	itunesControl := itunesbridge.NewItunesControl()
	mediaFileRepository := ledis.NewMediaFileRepository()
	nowPlayingRepository := ledis.NewNowPlayingRepository()
	scrobbler := engine.NewScrobbler(itunesControl, mediaFileRepository, nowPlayingRepository)
	albumRepository := ledis.NewAlbumRepository()
	artistRepository := storm.NewArtistRepository()
	ratings := engine.NewRatings(itunesControl, mediaFileRepository, albumRepository, artistRepository)
	mediaAnnotationController := NewMediaAnnotationController(scrobbler, ratings)
	return mediaAnnotationController
}

func initPlaylistsController() *PlaylistsController {
	itunesControl := itunesbridge.NewItunesControl()
	playlistRepository := ledis.NewPlaylistRepository()
	mediaFileRepository := ledis.NewMediaFileRepository()
	playlists := engine.NewPlaylists(itunesControl, playlistRepository, mediaFileRepository)
	playlistsController := NewPlaylistsController(playlists)
	return playlistsController
}

func initSearchingController() *SearchingController {
	artistRepository := storm.NewArtistRepository()
	albumRepository := ledis.NewAlbumRepository()
	mediaFileRepository := ledis.NewMediaFileRepository()
	db := newDB()
	search := engine.NewSearch(artistRepository, albumRepository, mediaFileRepository, db)
	searchingController := NewSearchingController(search)
	return searchingController
}

func initUsersController() *UsersController {
	usersController := NewUsersController()
	return usersController
}

func initMediaRetrievalController() *MediaRetrievalController {
	mediaFileRepository := ledis.NewMediaFileRepository()
	albumRepository := ledis.NewAlbumRepository()
	cover := engine.NewCover(mediaFileRepository, albumRepository)
	mediaRetrievalController := NewMediaRetrievalController(cover)
	return mediaRetrievalController
}

func initStreamController() *StreamController {
	mediaFileRepository := ledis.NewMediaFileRepository()
	streamController := NewStreamController(mediaFileRepository)
	return streamController
}

// wire_injectors.go:

var allProviders = wire.NewSet(itunesbridge.NewItunesControl, ledis.Set, storm.Set, engine.Set, NewSystemController,
	NewBrowsingController,
	NewAlbumListController,
	NewMediaAnnotationController,
	NewPlaylistsController,
	NewSearchingController,
	NewUsersController,
	NewMediaRetrievalController,
	NewStreamController,
	newDB,
)

func newDB() gomate.DB {
	return ledis2.NewEmbeddedDB(ledis.Db())
}
